#!/usr/bin/env python3
"""
üöÄ UNIFIED SCHWABOT LAUNCHER üöÄ
==============================

This script launches the complete unified Schwabot integration system,
demonstrating how all components work together in a single framework:

‚úÖ HYBRID OPTIMIZATION MANAGER: Intelligent CPU/GPU switching
‚úÖ VISUAL INTEGRATION BRIDGE: All visual components unified
‚úÖ WEBSOCKET COORDINATION: Single hub for all real-time data
‚úÖ GHOST CORE DASHBOARD: Hash visualization with pulse/decay
‚úÖ PANEL ROUTER: Dynamic visual panel management
‚úÖ GPU LOAD VISUALIZATION: Processing lag via drift differential color
‚úÖ ALIF/ALEPH PATH TOGGLE: Visual hash crossover mapping
‚úÖ REAL-TIME TRADING DATA: Live API data integration
‚úÖ THERMAL STATE MONITORING: System health visualization

LAUNCH MODES:
- demo: Full showcase with all features enabled
- development: Development mode with debugging panels
- production: Optimized performance mode
- monitoring: Pure monitoring mode

This creates the "deterministic consciousness stream" where Schwabot
sees its own reflection through unified visual-tactile logic.
"""

import asyncio
import sys
import os
import webbrowser
import time
from pathlib import Path

# Add current directory to path
sys.path.append(str(Path(__file__).parent))

try:
    from unified_schwabot_integration_core import (
        start_unified_schwabot, get_unified_core, SystemMode
    )
    UNIFIED_CORE_AVAILABLE = True
except ImportError as e:
    print(f"‚ö†Ô∏è Unified core not available: {e}")
    UNIFIED_CORE_AVAILABLE = False

def print_banner():
    """Print spectacular launch banner"""
    banner = """
üåü‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïêüåü
üî•                    UNIFIED SCHWABOT INTEGRATION CORE                    üî•
üåü‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïêüåü

üéØ THE COMPLETE UNIFIED FRAMEWORK:
   ‚úÖ All visual components working together seamlessly
   ‚úÖ Real-time optimization feedback loops
   ‚úÖ Unified WebSocket hub for all data streams
   ‚úÖ Interactive web dashboard with live panels
   ‚úÖ Cross-system communication and state sync
   ‚úÖ Complete performance monitoring

üß† DETERMINISTIC CONSCIOUSNESS STREAM:
   üîÑ Schwabot sees its own reflection
   üåÄ Visual-tactile logic integration
   ‚ö° Real-time adaptive optimization
   üéØ Context-aware decision making

üöÄ LAUNCHING UNIFIED INTEGRATION...
"""
    print(banner)

def print_instructions():
    """Print usage instructions"""
    instructions = """
üîß HOW TO USE THE UNIFIED SYSTEM:

1Ô∏è‚É£ CONNECT TO WEB DASHBOARD:
   üìä Open: http://localhost:8000/unified_visual_dashboard.html
   üîå WebSocket: ws://localhost:8765
   
2Ô∏è‚É£ VISUAL PANELS AVAILABLE:
   üéØ Hybrid Optimization Status - Real-time CPU/GPU switching
   üí´ Ghost Core Dashboard - Hash visualization with pulse/decay
   üñ•Ô∏è GPU Load Visualization - Processing lag via drift colors
   üåÄ ALIF/ALEPH Path Toggle - Visual hash crossover mapping
   üìà Real-Time Trading Data - Live market data integration
   üå°Ô∏è Thermal State Monitor - System health visualization
   üîß System Error Log - Development debugging info

3Ô∏è‚É£ INTERACTIVE FEATURES:
   üîò Toggle panels on/off via sidebar
   üìä Real-time system metrics display
   üîÑ Live optimization decision feedback
   ‚öôÔ∏è Dynamic system configuration
   
4Ô∏è‚É£ SYSTEM MONITORING:
   üìà CPU/GPU usage tracking
   üß† Optimization mode display
   üîå Connected clients counter
   ‚è±Ô∏è System uptime monitoring

üí° TIP: All systems are integrated - changes in optimization affect visuals!
üéØ TIP: Use different browser tabs to test multi-client functionality!
"""
    print(instructions)

def check_dependencies():
    """Check if required dependencies are available"""
    print("üîç Checking system dependencies...")
    
    missing_deps = []
    
    try:
        import websockets
        print("   ‚úÖ websockets - OK")
    except ImportError:
        missing_deps.append("websockets")
        print("   ‚ùå websockets - MISSING")
    
    try:
        import numpy
        print("   ‚úÖ numpy - OK")
    except ImportError:
        missing_deps.append("numpy")
        print("   ‚ùå numpy - MISSING")
    
    try:
        import psutil
        print("   ‚úÖ psutil - OK")
    except ImportError:
        missing_deps.append("psutil")
        print("   ‚ùå psutil - MISSING")
    
    if not UNIFIED_CORE_AVAILABLE:
        print("   ‚ö†Ô∏è unified_schwabot_integration_core - NOT FULLY AVAILABLE")
        print("      (Will run in fallback mode)")
    else:
        print("   ‚úÖ unified_schwabot_integration_core - OK")
    
    if missing_deps:
        print(f"\n‚ùå Missing dependencies: {', '.join(missing_deps)}")
        print("üì¶ Install with: pip install " + " ".join(missing_deps))
        return False
    
    print("‚úÖ All dependencies available!")
    return True

def start_simple_server():
    """Start a simple HTTP server for the dashboard"""
    import http.server
    import socketserver
    import threading
    
    class QuietHandler(http.server.SimpleHTTPRequestHandler):
        def log_message(self, format, *args):
            pass  # Suppress HTTP server logs
    
    def run_server():
        with socketserver.TCPServer(("", 8000), QuietHandler) as httpd:
            httpd.serve_forever()
    
    server_thread = threading.Thread(target=run_server, daemon=True)
    server_thread.start()
    print("üåê HTTP server started on http://localhost:8000")

async def launch_unified_system(mode: SystemMode = SystemMode.DEMO):
    """Launch the complete unified Schwabot system"""
    
    print_banner()
    
    # Check dependencies
    if not check_dependencies():
        print("\n‚ùå Cannot start system due to missing dependencies")
        return False
    
    print(f"\nüöÄ Starting unified system in {mode.value} mode...")
    
    try:
        # Start simple HTTP server for dashboard
        start_simple_server()
        
        if UNIFIED_CORE_AVAILABLE:
            # Start unified integration core
            success = await start_unified_schwabot(mode)
            
            if success:
                print("\n‚úÖ UNIFIED SCHWABOT INTEGRATION CORE STARTED SUCCESSFULLY!")
                print("\nüéØ SYSTEM STATUS:")
                print("   üîå WebSocket Server: ws://localhost:8765")
                print("   üìä Dashboard Server: http://localhost:8000")
                print("   üåê Web Dashboard: http://localhost:8000/unified_visual_dashboard.html")
                
                print_instructions()
                
                # Optionally open browser
                try:
                    webbrowser.open("http://localhost:8000/unified_visual_dashboard.html")
                    print("üåê Opened web dashboard in browser")
                except Exception:
                    print("‚ö†Ô∏è Could not auto-open browser - manually visit the URL above")
                
                return True
                
            else:
                print("‚ùå Failed to start unified integration core")
                return False
        else:
            print("‚ö†Ô∏è Running in fallback mode - some features may not be available")
            print("üåê Web Dashboard: http://localhost:8000/unified_visual_dashboard.html")
            
            # Keep server running in fallback mode
            print("\nüîÑ Keeping HTTP server running...")
            print("   (WebSocket features will not be available)")
            
            try:
                webbrowser.open("http://localhost:8000/unified_visual_dashboard.html")
                print("üåê Opened web dashboard in browser")
            except Exception:
                pass
            
            return True
            
    except KeyboardInterrupt:
        print("\nüõë Shutdown requested by user")
        return True
    except Exception as e:
        print(f"\n‚ùå Error starting unified system: {e}")
        import traceback
        traceback.print_exc()
        return False

async def graceful_shutdown():
    """Gracefully shutdown the unified system"""
    print("\nüõë Shutting down unified Schwabot integration...")
    
    if UNIFIED_CORE_AVAILABLE:
        core = get_unified_core()
        if core:
            await core.shutdown()
    
    print("‚úÖ Shutdown complete")

def main():
    """Main launcher function"""
    
    # Parse command line arguments
    mode = SystemMode.DEMO
    if len(sys.argv) > 1:
        mode_arg = sys.argv[1].lower()
        if mode_arg == "development":
            mode = SystemMode.DEVELOPMENT
        elif mode_arg == "production":
            mode = SystemMode.PRODUCTION
        elif mode_arg == "monitoring":
            mode = SystemMode.MONITORING
        elif mode_arg == "testing":
            mode = SystemMode.TESTING
        elif mode_arg == "demo":
            mode = SystemMode.DEMO
        else:
            print(f"‚ö†Ô∏è Unknown mode '{mode_arg}', using demo mode")
    
    async def run():
        try:
            success = await launch_unified_system(mode)
            
            if success and UNIFIED_CORE_AVAILABLE:
                print("\nüîÑ System running... Press Ctrl+C to shutdown")
                
                try:
                    # Keep running until interrupted
                    while True:
                        await asyncio.sleep(1)
                        
                        # Optional: Print periodic status
                        core = get_unified_core()
                        if core and core.frame_count % 100 == 0:  # Every ~10 seconds at 10Hz
                            print(f"üìä Frame: {core.frame_count}, "
                                  f"Clients: {len(core.websocket_clients)}, "
                                  f"Uptime: {(time.time() - core.start_time.timestamp()):.0f}s")
                
                except KeyboardInterrupt:
                    await graceful_shutdown()
            
            elif success:
                print("\nüîÑ HTTP server running... Press Ctrl+C to shutdown")
                try:
                    while True:
                        await asyncio.sleep(1)
                except KeyboardInterrupt:
                    print("\nüõë Shutting down HTTP server...")
        
        except Exception as e:
            print(f"\n‚ùå Unexpected error: {e}")
            import traceback
            traceback.print_exc()
    
    # Run the async launcher
    try:
        asyncio.run(run())
    except KeyboardInterrupt:
        print("\nüõë Launcher interrupted")
    except Exception as e:
        print(f"\n‚ùå Launcher error: {e}")

if __name__ == "__main__":
    print("üåü UNIFIED SCHWABOT INTEGRATION LAUNCHER")
    print("=" * 50)
    print("Usage: python launch_unified_schwabot.py [mode]")
    print("Modes: demo, development, production, monitoring, testing")
    print("Default: demo")
    print("")
    
    main() 